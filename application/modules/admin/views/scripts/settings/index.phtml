<div id="content-panel">
    <h2>
        <?= $this->image('/fizzy_assets/images/icon/gear.png', array('alt' => 'Settings Icon')); ?>
        <?= $this->translate('Settings') ?>
    </h2>

    <table class="settings" id="settings-table">
        <tbody>
            <?php foreach($this->settings as $component => $settings) : ?>
                <tr>
                    <th colspan="2"><?= $this->translate(ucfirst($component)) ?></th>
                </tr>
                <?php foreach($settings as $setting) : ?>
                <tr>
                    <td class="label">
                        <?= $this->translate($setting->label) ?>
                    </td>
                    <td class="setting editable">
                        <div id="<?= $setting->component; ?>:<?= $setting->setting_key; ?>" class="value text"><?= $setting->value; ?></div>
                        <small><?= $this->translate($setting->description) ?></small>
                    </td>
                </tr>
                <?php endforeach; ?>

            <?php endforeach; ?>
        </tbody>
    </table>
    <?php $this->jQuery()->uiEnable(); ?>
    <script type="text/javascript">

        (function($) {

            $.fn.inlineEdit = function(options) {
                options = $.extend({
                    hoverClass: 'hover-edit',
                    savingClass: 'saving',
                    successClass: 'settings-success',
                    errorClass: 'settings-error',
                    value: '',
                    save: ''
                }, options);

                return $.each(this, function() {
                    $.inlineEdit(this, options);
                });
            }

            $.inlineEdit = function(object, options) {
                // Define self, this is the table cell
                var self = $(object);
                // Register the container with the setting value
                self.valueContainer = self.children('.value');
                // Get the initial value
                self.value = $.trim(self.valueContainer.text()) || options.value;

                // Get the component and key for the setting
                var parts = self.valueContainer.attr('id').split(':');
                self.settingKey = parts.pop();
                self.settingComponent = parts.pop();
                
                /**
                 * Save function. Executes an AJAX function to save the setting
                 * if it changed.
                 * @param newValue
                 */
                self.save = function(newValue) {
                    var oldValue = self.value;
                    // Save new value
                    self.value = newValue;
                    // Reset the input
                    self.reset();
                    // Only save if new value was different from the old value
                    if (newValue != oldValue) {
                        self.removeClass('editing')
                            .removeClass(options.successClass)
                            .removeClass(options.errorClass)
                            .addClass(options.savingClass);
                        var settingData = {
                            'component': self.settingComponent,
                            'settingKey': self.settingKey,
                            'value': self.value
                        };
                        $.ajax({
                            url: '<?= $this->url('@admin_settings_update'); ?>',
                            type: 'POST',
                            processData: false,
                            data: JSON.stringify(settingData),
                            contentType: 'application/json',
                            error: function(data, textStatus, XMLHttpRequest) {
                                self.value = oldValue;
                                self.error();
                            },
                            success: function(data, textStatus, XMLHttpRequest) {
                                console.log(data);
                                self.success();
                            }
                        });
                    }
                }

                /**
                 * Renders the success class over the table cell.
                 * This is called after the ajax callback ended successfully.
                 */
                self.success = function() {
                    self.removeClass(options.savingClass)
                        .addClass(options.successClass);
                    
                    self.delay(5000).animate({ backgroundColor: "#FFFFFF" }, 2500, function() {
                        $(this).removeClass(options.successClass).attr('style', '');
                    });
                        
                }

                /**
                 * Renders the error class over the table cell.
                 * This is called after the ajax callback ended successfully.
                 */
                self.error = function() {
                    self.removeClass(options.savingClass)
                        .addClass(options.errorClass);
                    self.delay(5000).animate({ backgroundColor: "#FFFFFF" }, 2500, function() {
                        $(this).removeClass(options.errorClass).attr('style', '');
                    });
                }

                /**
                 * Reset the table cell
                 */
                self.reset = function() {
                    self.removeClass('editing').addClass('editable');
                    self.valueContainer.removeClass('form').addClass('value');
                    self.valueContainer.html(self.value);
                }

                /**
                 * Update the table cell class on hover
                 */
                self.hover(function() {
                    if (!self.hasClass('editing') && !self.hasClass(options.savingClass)) {
                        self.addClass(options.hoverClass);
                    }
                }, function() {
                    self.removeClass(options.hoverClass);
                });
                /**
                 * OnClick convert the value container to a form.
                 */
                self.click(function(event) {
                    var target = $(event.target);
                    self.removeClass(options.hoverClass);
                    
                    if (target.is(self[0].tagName) || target.parent().is(self[0].tagName)) {
                        if (null != $.inlineEdit.lastOpened) {
                            $.inlineEdit.lastOpened.reset();
                        }
                        $.inlineEdit.lastOpened = self;
                        self.removeClass('editable').addClass('editing');
                        self.valueContainer.removeClass('value').addClass('form');

                        // Input field
                        var tinput = $(document.createElement('input'))
                            .attr('type', 'text')
                            .val(self.value);
                        // Save button
                        var saveBtn = $(document.createElement('button'))
                            .attr('id', 'editable-save')
                            .html('Save')
                            .click(function() {
                                self.save($(this).parent().find('input').val());
                            });
                        // Cancel button
                        var cancelBtn = $(document.createElement('button'))
                            .attr('id', 'editable-cancel')
                            .html('Cancel')
                            .click(function() {
                                self.reset();
                            });

                        // Replace container contents
                        self.valueContainer.html(tinput)
                            .append(saveBtn)
                            .append(cancelBtn)
                            .find('input')
                            .focus();
                    }
                });
            }
            $.inlineEdit.lastOpened = null;
        })(jQuery);

        $(document).ready(function() {
            $('.editable').inlineEdit();
        });

    </script>
</div>

<div id="sidebar-panel">
    <h2><?= $this->translate('Actions') ?></h2>
</div>