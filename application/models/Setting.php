<?php

/**
 * Setting
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $
 */
class Setting extends BaseSetting
{

    public static $_settings = null;

    public static function getAll($reload = false)
    {
        if (null === self::$_settings || $reload) {
            $settings = array();
            foreach (Doctrine_Core::getTable('Setting')->findAll() as $setting) {
                if (!isset($settings[$setting->component])) {
                    $settings[$setting->component] = array();
                }
                $settings[$setting->component][$setting->setting_key] = $setting;
            }
            
            self::$_settings = $settings;
        }

        return self::$_settings;
    }

    /**
     * Returns one or more settings for a given key. When no component is specified
     * an array with settings will be returned.
     * @param string $key
     * @param string $component
     * @param boolean $reload
     * @return string|array
     */
    public static function getKey($key, $component = null, $reload = false)
    {
        $settings = self::getAll($reload);

        if (null === $component) {
            $matched = array();

            foreach ($settings as $componentSettings) {
                foreach ($componentSettings as $setting) {
                    if ($key === $setting->setting_key) {
                        $matched[] = $setting;
                    }
                }
            }

            return $matched;
        }
        else {
            if (!isset($settings[$component]) || empty($settings[$component])) {
                return null;
            }

            return isset($settings[$component][$key]) ? $settings[$component][$key] : null;
        }

        return null;
    }

    /**
     * Get the value for a settings key.
     * @param string $key
     * @param string $component
     * @param boolean $reload
     */
    public static function getValue($key, $component, $reload = false)
    {
        $setting = self::getKey($key, $component, $reload);

        if (null === $setting) {
            return null;
        }

        return $setting->value;
    }

    public function isNew()
    {
        return empty($this->id);
    }

}